// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class ActorInfo;
struct ActorInfoDefaultTypeInternal;
extern ActorInfoDefaultTypeInternal _ActorInfo_default_instance_;
class ItemInfo;
struct ItemInfoDefaultTypeInternal;
extern ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
class LobbyPlayerInfo;
struct LobbyPlayerInfoDefaultTypeInternal;
extern LobbyPlayerInfoDefaultTypeInternal _LobbyPlayerInfo_default_instance_;
class PositionInfo;
struct PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class SkillInfo;
struct SkillInfoDefaultTypeInternal;
extern SkillInfoDefaultTypeInternal _SkillInfo_default_instance_;
class StatInfo;
struct StatInfoDefaultTypeInternal;
extern StatInfoDefaultTypeInternal _StatInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::ActorInfo* Arena::CreateMaybeMessage<::Protocol::ActorInfo>(Arena*);
template<> ::Protocol::ItemInfo* Arena::CreateMaybeMessage<::Protocol::ItemInfo>(Arena*);
template<> ::Protocol::LobbyPlayerInfo* Arena::CreateMaybeMessage<::Protocol::LobbyPlayerInfo>(Arena*);
template<> ::Protocol::PositionInfo* Arena::CreateMaybeMessage<::Protocol::PositionInfo>(Arena*);
template<> ::Protocol::ServerInfo* Arena::CreateMaybeMessage<::Protocol::ServerInfo>(Arena*);
template<> ::Protocol::SkillInfo* Arena::CreateMaybeMessage<::Protocol::SkillInfo>(Arena*);
template<> ::Protocol::StatInfo* Arena::CreateMaybeMessage<::Protocol::StatInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  explicit PROTOBUF_CONSTEXPR ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerInfo& from) {
    ServerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ServerInfo";
  }
  protected:
  explicit ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
    kComplexityFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 3;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // int32 complexity = 4;
  void clear_complexity();
  int32_t complexity() const;
  void set_complexity(int32_t value);
  private:
  int32_t _internal_complexity() const;
  void _internal_set_complexity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int32_t port_;
    int32_t complexity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PositionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PositionInfo) */ {
 public:
  inline PositionInfo() : PositionInfo(nullptr) {}
  ~PositionInfo() override;
  explicit PROTOBUF_CONSTEXPR PositionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionInfo(const PositionInfo& from);
  PositionInfo(PositionInfo&& from) noexcept
    : PositionInfo() {
    *this = ::std::move(from);
  }

  inline PositionInfo& operator=(const PositionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionInfo& operator=(PositionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionInfo* internal_default_instance() {
    return reinterpret_cast<const PositionInfo*>(
               &_PositionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PositionInfo& a, PositionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionInfo& from) {
    PositionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PositionInfo";
  }
  protected:
  explicit PositionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kMoveDirFieldNumber = 2,
    kPositionXFieldNumber = 3,
    kPositionYFieldNumber = 4,
    kUsedSkillIdFieldNumber = 5,
  };
  // .Protocol.AIState state = 1;
  void clear_state();
  ::Protocol::AIState state() const;
  void set_state(::Protocol::AIState value);
  private:
  ::Protocol::AIState _internal_state() const;
  void _internal_set_state(::Protocol::AIState value);
  public:

  // .Protocol.MoveDir moveDir = 2;
  void clear_movedir();
  ::Protocol::MoveDir movedir() const;
  void set_movedir(::Protocol::MoveDir value);
  private:
  ::Protocol::MoveDir _internal_movedir() const;
  void _internal_set_movedir(::Protocol::MoveDir value);
  public:

  // float positionX = 3;
  void clear_positionx();
  float positionx() const;
  void set_positionx(float value);
  private:
  float _internal_positionx() const;
  void _internal_set_positionx(float value);
  public:

  // float positionY = 4;
  void clear_positiony();
  float positiony() const;
  void set_positiony(float value);
  private:
  float _internal_positiony() const;
  void _internal_set_positiony(float value);
  public:

  // int32 usedSkillId = 5;
  void clear_usedskillid();
  int32_t usedskillid() const;
  void set_usedskillid(int32_t value);
  private:
  int32_t _internal_usedskillid() const;
  void _internal_set_usedskillid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PositionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int state_;
    int movedir_;
    float positionx_;
    float positiony_;
    int32_t usedskillid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class StatInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.StatInfo) */ {
 public:
  inline StatInfo() : StatInfo(nullptr) {}
  ~StatInfo() override;
  explicit PROTOBUF_CONSTEXPR StatInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatInfo(const StatInfo& from);
  StatInfo(StatInfo&& from) noexcept
    : StatInfo() {
    *this = ::std::move(from);
  }

  inline StatInfo& operator=(const StatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatInfo& operator=(StatInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatInfo* internal_default_instance() {
    return reinterpret_cast<const StatInfo*>(
               &_StatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StatInfo& a, StatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StatInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatInfo& from) {
    StatInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.StatInfo";
  }
  protected:
  explicit StatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kHpFieldNumber = 2,
    kMaxHpFieldNumber = 3,
    kAttackFieldNumber = 4,
    kTotalExpFieldNumber = 5,
    kSpeedFieldNumber = 6,
  };
  // int32 level = 1;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 hp = 2;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // int32 maxHp = 3;
  void clear_maxhp();
  int32_t maxhp() const;
  void set_maxhp(int32_t value);
  private:
  int32_t _internal_maxhp() const;
  void _internal_set_maxhp(int32_t value);
  public:

  // int32 attack = 4;
  void clear_attack();
  int32_t attack() const;
  void set_attack(int32_t value);
  private:
  int32_t _internal_attack() const;
  void _internal_set_attack(int32_t value);
  public:

  // int32 totalExp = 5;
  void clear_totalexp();
  int32_t totalexp() const;
  void set_totalexp(int32_t value);
  private:
  int32_t _internal_totalexp() const;
  void _internal_set_totalexp(int32_t value);
  public:

  // float speed = 6;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.StatInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t level_;
    int32_t hp_;
    int32_t maxhp_;
    int32_t attack_;
    int32_t totalexp_;
    float speed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class LobbyPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LobbyPlayerInfo) */ {
 public:
  inline LobbyPlayerInfo() : LobbyPlayerInfo(nullptr) {}
  ~LobbyPlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR LobbyPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LobbyPlayerInfo(const LobbyPlayerInfo& from);
  LobbyPlayerInfo(LobbyPlayerInfo&& from) noexcept
    : LobbyPlayerInfo() {
    *this = ::std::move(from);
  }

  inline LobbyPlayerInfo& operator=(const LobbyPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobbyPlayerInfo& operator=(LobbyPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LobbyPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LobbyPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const LobbyPlayerInfo*>(
               &_LobbyPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LobbyPlayerInfo& a, LobbyPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LobbyPlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobbyPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LobbyPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LobbyPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LobbyPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LobbyPlayerInfo& from) {
    LobbyPlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobbyPlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LobbyPlayerInfo";
  }
  protected:
  explicit LobbyPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kStatInfoFieldNumber = 3,
    kPlayerDbIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Protocol.StatInfo statInfo = 3;
  bool has_statinfo() const;
  private:
  bool _internal_has_statinfo() const;
  public:
  void clear_statinfo();
  const ::Protocol::StatInfo& statinfo() const;
  PROTOBUF_NODISCARD ::Protocol::StatInfo* release_statinfo();
  ::Protocol::StatInfo* mutable_statinfo();
  void set_allocated_statinfo(::Protocol::StatInfo* statinfo);
  private:
  const ::Protocol::StatInfo& _internal_statinfo() const;
  ::Protocol::StatInfo* _internal_mutable_statinfo();
  public:
  void unsafe_arena_set_allocated_statinfo(
      ::Protocol::StatInfo* statinfo);
  ::Protocol::StatInfo* unsafe_arena_release_statinfo();

  // int32 playerDbId = 1;
  void clear_playerdbid();
  int32_t playerdbid() const;
  void set_playerdbid(int32_t value);
  private:
  int32_t _internal_playerdbid() const;
  void _internal_set_playerdbid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.LobbyPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::Protocol::StatInfo* statinfo_;
    int32_t playerdbid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ActorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ActorInfo) */ {
 public:
  inline ActorInfo() : ActorInfo(nullptr) {}
  ~ActorInfo() override;
  explicit PROTOBUF_CONSTEXPR ActorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActorInfo(const ActorInfo& from);
  ActorInfo(ActorInfo&& from) noexcept
    : ActorInfo() {
    *this = ::std::move(from);
  }

  inline ActorInfo& operator=(const ActorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorInfo& operator=(ActorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorInfo* internal_default_instance() {
    return reinterpret_cast<const ActorInfo*>(
               &_ActorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ActorInfo& a, ActorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActorInfo& from) {
    ActorInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ActorInfo";
  }
  protected:
  explicit ActorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPositionInfoFieldNumber = 3,
    kStatInfoFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Protocol.PositionInfo positionInfo = 3;
  bool has_positioninfo() const;
  private:
  bool _internal_has_positioninfo() const;
  public:
  void clear_positioninfo();
  const ::Protocol::PositionInfo& positioninfo() const;
  PROTOBUF_NODISCARD ::Protocol::PositionInfo* release_positioninfo();
  ::Protocol::PositionInfo* mutable_positioninfo();
  void set_allocated_positioninfo(::Protocol::PositionInfo* positioninfo);
  private:
  const ::Protocol::PositionInfo& _internal_positioninfo() const;
  ::Protocol::PositionInfo* _internal_mutable_positioninfo();
  public:
  void unsafe_arena_set_allocated_positioninfo(
      ::Protocol::PositionInfo* positioninfo);
  ::Protocol::PositionInfo* unsafe_arena_release_positioninfo();

  // .Protocol.StatInfo statInfo = 4;
  bool has_statinfo() const;
  private:
  bool _internal_has_statinfo() const;
  public:
  void clear_statinfo();
  const ::Protocol::StatInfo& statinfo() const;
  PROTOBUF_NODISCARD ::Protocol::StatInfo* release_statinfo();
  ::Protocol::StatInfo* mutable_statinfo();
  void set_allocated_statinfo(::Protocol::StatInfo* statinfo);
  private:
  const ::Protocol::StatInfo& _internal_statinfo() const;
  ::Protocol::StatInfo* _internal_mutable_statinfo();
  public:
  void unsafe_arena_set_allocated_statinfo(
      ::Protocol::StatInfo* statinfo);
  ::Protocol::StatInfo* unsafe_arena_release_statinfo();

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ActorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::Protocol::PositionInfo* positioninfo_;
    ::Protocol::StatInfo* statinfo_;
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ItemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ItemInfo) */ {
 public:
  inline ItemInfo() : ItemInfo(nullptr) {}
  ~ItemInfo() override;
  explicit PROTOBUF_CONSTEXPR ItemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemInfo(const ItemInfo& from);
  ItemInfo(ItemInfo&& from) noexcept
    : ItemInfo() {
    *this = ::std::move(from);
  }

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemInfo& operator=(ItemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemInfo* internal_default_instance() {
    return reinterpret_cast<const ItemInfo*>(
               &_ItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ItemInfo& a, ItemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemInfo& from) {
    ItemInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ItemInfo";
  }
  protected:
  explicit ItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDbIdFieldNumber = 1,
    kDataSheetIdFieldNumber = 2,
    kCountFieldNumber = 3,
    kSlotFieldNumber = 4,
    kEquippedFieldNumber = 5,
  };
  // int32 itemDbId = 1;
  void clear_itemdbid();
  int32_t itemdbid() const;
  void set_itemdbid(int32_t value);
  private:
  int32_t _internal_itemdbid() const;
  void _internal_set_itemdbid(int32_t value);
  public:

  // int32 dataSheetId = 2;
  void clear_datasheetid();
  int32_t datasheetid() const;
  void set_datasheetid(int32_t value);
  private:
  int32_t _internal_datasheetid() const;
  void _internal_set_datasheetid(int32_t value);
  public:

  // int32 count = 3;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // int32 slot = 4;
  void clear_slot();
  int32_t slot() const;
  void set_slot(int32_t value);
  private:
  int32_t _internal_slot() const;
  void _internal_set_slot(int32_t value);
  public:

  // bool equipped = 5;
  void clear_equipped();
  bool equipped() const;
  void set_equipped(bool value);
  private:
  bool _internal_equipped() const;
  void _internal_set_equipped(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ItemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t itemdbid_;
    int32_t datasheetid_;
    int32_t count_;
    int32_t slot_;
    bool equipped_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class SkillInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SkillInfo) */ {
 public:
  inline SkillInfo() : SkillInfo(nullptr) {}
  ~SkillInfo() override;
  explicit PROTOBUF_CONSTEXPR SkillInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkillInfo(const SkillInfo& from);
  SkillInfo(SkillInfo&& from) noexcept
    : SkillInfo() {
    *this = ::std::move(from);
  }

  inline SkillInfo& operator=(const SkillInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillInfo& operator=(SkillInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkillInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkillInfo* internal_default_instance() {
    return reinterpret_cast<const SkillInfo*>(
               &_SkillInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SkillInfo& a, SkillInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkillInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkillInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkillInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkillInfo& from) {
    SkillInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SkillInfo";
  }
  protected:
  explicit SkillInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillIdFieldNumber = 1,
  };
  // int32 skillId = 1;
  void clear_skillid();
  int32_t skillid() const;
  void set_skillid(int32_t value);
  private:
  int32_t _internal_skillid() const;
  void _internal_set_skillid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SkillInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t skillid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfo

// string name = 1;
inline void ServerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ServerInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.ServerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ServerInfo.name)
}
inline std::string* ServerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.ServerInfo.name)
  return _s;
}
inline const std::string& ServerInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ServerInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.ServerInfo.name)
  return _impl_.name_.Release();
}
inline void ServerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ServerInfo.name)
}

// string ip = 2;
inline void ServerInfo::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& ServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:Protocol.ServerInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ServerInfo.ip)
}
inline std::string* ServerInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:Protocol.ServerInfo.ip)
  return _s;
}
inline const std::string& ServerInfo::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void ServerInfo::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerInfo::release_ip() {
  // @@protoc_insertion_point(field_release:Protocol.ServerInfo.ip)
  return _impl_.ip_.Release();
}
inline void ServerInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ServerInfo.ip)
}

// int32 port = 3;
inline void ServerInfo::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t ServerInfo::_internal_port() const {
  return _impl_.port_;
}
inline int32_t ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:Protocol.ServerInfo.port)
  return _internal_port();
}
inline void ServerInfo::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void ServerInfo::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:Protocol.ServerInfo.port)
}

// int32 complexity = 4;
inline void ServerInfo::clear_complexity() {
  _impl_.complexity_ = 0;
}
inline int32_t ServerInfo::_internal_complexity() const {
  return _impl_.complexity_;
}
inline int32_t ServerInfo::complexity() const {
  // @@protoc_insertion_point(field_get:Protocol.ServerInfo.complexity)
  return _internal_complexity();
}
inline void ServerInfo::_internal_set_complexity(int32_t value) {
  
  _impl_.complexity_ = value;
}
inline void ServerInfo::set_complexity(int32_t value) {
  _internal_set_complexity(value);
  // @@protoc_insertion_point(field_set:Protocol.ServerInfo.complexity)
}

// -------------------------------------------------------------------

// PositionInfo

// .Protocol.AIState state = 1;
inline void PositionInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::AIState PositionInfo::_internal_state() const {
  return static_cast< ::Protocol::AIState >(_impl_.state_);
}
inline ::Protocol::AIState PositionInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.state)
  return _internal_state();
}
inline void PositionInfo::_internal_set_state(::Protocol::AIState value) {
  
  _impl_.state_ = value;
}
inline void PositionInfo::set_state(::Protocol::AIState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.state)
}

// .Protocol.MoveDir moveDir = 2;
inline void PositionInfo::clear_movedir() {
  _impl_.movedir_ = 0;
}
inline ::Protocol::MoveDir PositionInfo::_internal_movedir() const {
  return static_cast< ::Protocol::MoveDir >(_impl_.movedir_);
}
inline ::Protocol::MoveDir PositionInfo::movedir() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.moveDir)
  return _internal_movedir();
}
inline void PositionInfo::_internal_set_movedir(::Protocol::MoveDir value) {
  
  _impl_.movedir_ = value;
}
inline void PositionInfo::set_movedir(::Protocol::MoveDir value) {
  _internal_set_movedir(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.moveDir)
}

// float positionX = 3;
inline void PositionInfo::clear_positionx() {
  _impl_.positionx_ = 0;
}
inline float PositionInfo::_internal_positionx() const {
  return _impl_.positionx_;
}
inline float PositionInfo::positionx() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.positionX)
  return _internal_positionx();
}
inline void PositionInfo::_internal_set_positionx(float value) {
  
  _impl_.positionx_ = value;
}
inline void PositionInfo::set_positionx(float value) {
  _internal_set_positionx(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.positionX)
}

// float positionY = 4;
inline void PositionInfo::clear_positiony() {
  _impl_.positiony_ = 0;
}
inline float PositionInfo::_internal_positiony() const {
  return _impl_.positiony_;
}
inline float PositionInfo::positiony() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.positionY)
  return _internal_positiony();
}
inline void PositionInfo::_internal_set_positiony(float value) {
  
  _impl_.positiony_ = value;
}
inline void PositionInfo::set_positiony(float value) {
  _internal_set_positiony(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.positionY)
}

// int32 usedSkillId = 5;
inline void PositionInfo::clear_usedskillid() {
  _impl_.usedskillid_ = 0;
}
inline int32_t PositionInfo::_internal_usedskillid() const {
  return _impl_.usedskillid_;
}
inline int32_t PositionInfo::usedskillid() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.usedSkillId)
  return _internal_usedskillid();
}
inline void PositionInfo::_internal_set_usedskillid(int32_t value) {
  
  _impl_.usedskillid_ = value;
}
inline void PositionInfo::set_usedskillid(int32_t value) {
  _internal_set_usedskillid(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.usedSkillId)
}

// -------------------------------------------------------------------

// StatInfo

// int32 level = 1;
inline void StatInfo::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t StatInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t StatInfo::level() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.level)
  return _internal_level();
}
inline void StatInfo::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void StatInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.level)
}

// int32 hp = 2;
inline void StatInfo::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t StatInfo::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t StatInfo::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.hp)
  return _internal_hp();
}
inline void StatInfo::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void StatInfo::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.hp)
}

// int32 maxHp = 3;
inline void StatInfo::clear_maxhp() {
  _impl_.maxhp_ = 0;
}
inline int32_t StatInfo::_internal_maxhp() const {
  return _impl_.maxhp_;
}
inline int32_t StatInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.maxHp)
  return _internal_maxhp();
}
inline void StatInfo::_internal_set_maxhp(int32_t value) {
  
  _impl_.maxhp_ = value;
}
inline void StatInfo::set_maxhp(int32_t value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.maxHp)
}

// int32 attack = 4;
inline void StatInfo::clear_attack() {
  _impl_.attack_ = 0;
}
inline int32_t StatInfo::_internal_attack() const {
  return _impl_.attack_;
}
inline int32_t StatInfo::attack() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.attack)
  return _internal_attack();
}
inline void StatInfo::_internal_set_attack(int32_t value) {
  
  _impl_.attack_ = value;
}
inline void StatInfo::set_attack(int32_t value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.attack)
}

// int32 totalExp = 5;
inline void StatInfo::clear_totalexp() {
  _impl_.totalexp_ = 0;
}
inline int32_t StatInfo::_internal_totalexp() const {
  return _impl_.totalexp_;
}
inline int32_t StatInfo::totalexp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.totalExp)
  return _internal_totalexp();
}
inline void StatInfo::_internal_set_totalexp(int32_t value) {
  
  _impl_.totalexp_ = value;
}
inline void StatInfo::set_totalexp(int32_t value) {
  _internal_set_totalexp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.totalExp)
}

// float speed = 6;
inline void StatInfo::clear_speed() {
  _impl_.speed_ = 0;
}
inline float StatInfo::_internal_speed() const {
  return _impl_.speed_;
}
inline float StatInfo::speed() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.speed)
  return _internal_speed();
}
inline void StatInfo::_internal_set_speed(float value) {
  
  _impl_.speed_ = value;
}
inline void StatInfo::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.speed)
}

// -------------------------------------------------------------------

// LobbyPlayerInfo

// int32 playerDbId = 1;
inline void LobbyPlayerInfo::clear_playerdbid() {
  _impl_.playerdbid_ = 0;
}
inline int32_t LobbyPlayerInfo::_internal_playerdbid() const {
  return _impl_.playerdbid_;
}
inline int32_t LobbyPlayerInfo::playerdbid() const {
  // @@protoc_insertion_point(field_get:Protocol.LobbyPlayerInfo.playerDbId)
  return _internal_playerdbid();
}
inline void LobbyPlayerInfo::_internal_set_playerdbid(int32_t value) {
  
  _impl_.playerdbid_ = value;
}
inline void LobbyPlayerInfo::set_playerdbid(int32_t value) {
  _internal_set_playerdbid(value);
  // @@protoc_insertion_point(field_set:Protocol.LobbyPlayerInfo.playerDbId)
}

// string name = 2;
inline void LobbyPlayerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LobbyPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.LobbyPlayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbyPlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.LobbyPlayerInfo.name)
}
inline std::string* LobbyPlayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.LobbyPlayerInfo.name)
  return _s;
}
inline const std::string& LobbyPlayerInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LobbyPlayerInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbyPlayerInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbyPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.LobbyPlayerInfo.name)
  return _impl_.name_.Release();
}
inline void LobbyPlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.LobbyPlayerInfo.name)
}

// .Protocol.StatInfo statInfo = 3;
inline bool LobbyPlayerInfo::_internal_has_statinfo() const {
  return this != internal_default_instance() && _impl_.statinfo_ != nullptr;
}
inline bool LobbyPlayerInfo::has_statinfo() const {
  return _internal_has_statinfo();
}
inline void LobbyPlayerInfo::clear_statinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.statinfo_ != nullptr) {
    delete _impl_.statinfo_;
  }
  _impl_.statinfo_ = nullptr;
}
inline const ::Protocol::StatInfo& LobbyPlayerInfo::_internal_statinfo() const {
  const ::Protocol::StatInfo* p = _impl_.statinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::StatInfo&>(
      ::Protocol::_StatInfo_default_instance_);
}
inline const ::Protocol::StatInfo& LobbyPlayerInfo::statinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.LobbyPlayerInfo.statInfo)
  return _internal_statinfo();
}
inline void LobbyPlayerInfo::unsafe_arena_set_allocated_statinfo(
    ::Protocol::StatInfo* statinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statinfo_);
  }
  _impl_.statinfo_ = statinfo;
  if (statinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.LobbyPlayerInfo.statInfo)
}
inline ::Protocol::StatInfo* LobbyPlayerInfo::release_statinfo() {
  
  ::Protocol::StatInfo* temp = _impl_.statinfo_;
  _impl_.statinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::StatInfo* LobbyPlayerInfo::unsafe_arena_release_statinfo() {
  // @@protoc_insertion_point(field_release:Protocol.LobbyPlayerInfo.statInfo)
  
  ::Protocol::StatInfo* temp = _impl_.statinfo_;
  _impl_.statinfo_ = nullptr;
  return temp;
}
inline ::Protocol::StatInfo* LobbyPlayerInfo::_internal_mutable_statinfo() {
  
  if (_impl_.statinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::StatInfo>(GetArenaForAllocation());
    _impl_.statinfo_ = p;
  }
  return _impl_.statinfo_;
}
inline ::Protocol::StatInfo* LobbyPlayerInfo::mutable_statinfo() {
  ::Protocol::StatInfo* _msg = _internal_mutable_statinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.LobbyPlayerInfo.statInfo)
  return _msg;
}
inline void LobbyPlayerInfo::set_allocated_statinfo(::Protocol::StatInfo* statinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.statinfo_;
  }
  if (statinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(statinfo);
    if (message_arena != submessage_arena) {
      statinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.statinfo_ = statinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.LobbyPlayerInfo.statInfo)
}

// -------------------------------------------------------------------

// ActorInfo

// uint64 id = 1;
inline void ActorInfo::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t ActorInfo::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t ActorInfo::id() const {
  // @@protoc_insertion_point(field_get:Protocol.ActorInfo.id)
  return _internal_id();
}
inline void ActorInfo::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void ActorInfo::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ActorInfo.id)
}

// string name = 2;
inline void ActorInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ActorInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.ActorInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActorInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ActorInfo.name)
}
inline std::string* ActorInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.ActorInfo.name)
  return _s;
}
inline const std::string& ActorInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ActorInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ActorInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ActorInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.ActorInfo.name)
  return _impl_.name_.Release();
}
inline void ActorInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ActorInfo.name)
}

// .Protocol.PositionInfo positionInfo = 3;
inline bool ActorInfo::_internal_has_positioninfo() const {
  return this != internal_default_instance() && _impl_.positioninfo_ != nullptr;
}
inline bool ActorInfo::has_positioninfo() const {
  return _internal_has_positioninfo();
}
inline void ActorInfo::clear_positioninfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.positioninfo_ != nullptr) {
    delete _impl_.positioninfo_;
  }
  _impl_.positioninfo_ = nullptr;
}
inline const ::Protocol::PositionInfo& ActorInfo::_internal_positioninfo() const {
  const ::Protocol::PositionInfo* p = _impl_.positioninfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PositionInfo&>(
      ::Protocol::_PositionInfo_default_instance_);
}
inline const ::Protocol::PositionInfo& ActorInfo::positioninfo() const {
  // @@protoc_insertion_point(field_get:Protocol.ActorInfo.positionInfo)
  return _internal_positioninfo();
}
inline void ActorInfo::unsafe_arena_set_allocated_positioninfo(
    ::Protocol::PositionInfo* positioninfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.positioninfo_);
  }
  _impl_.positioninfo_ = positioninfo;
  if (positioninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ActorInfo.positionInfo)
}
inline ::Protocol::PositionInfo* ActorInfo::release_positioninfo() {
  
  ::Protocol::PositionInfo* temp = _impl_.positioninfo_;
  _impl_.positioninfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PositionInfo* ActorInfo::unsafe_arena_release_positioninfo() {
  // @@protoc_insertion_point(field_release:Protocol.ActorInfo.positionInfo)
  
  ::Protocol::PositionInfo* temp = _impl_.positioninfo_;
  _impl_.positioninfo_ = nullptr;
  return temp;
}
inline ::Protocol::PositionInfo* ActorInfo::_internal_mutable_positioninfo() {
  
  if (_impl_.positioninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PositionInfo>(GetArenaForAllocation());
    _impl_.positioninfo_ = p;
  }
  return _impl_.positioninfo_;
}
inline ::Protocol::PositionInfo* ActorInfo::mutable_positioninfo() {
  ::Protocol::PositionInfo* _msg = _internal_mutable_positioninfo();
  // @@protoc_insertion_point(field_mutable:Protocol.ActorInfo.positionInfo)
  return _msg;
}
inline void ActorInfo::set_allocated_positioninfo(::Protocol::PositionInfo* positioninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.positioninfo_;
  }
  if (positioninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(positioninfo);
    if (message_arena != submessage_arena) {
      positioninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positioninfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.positioninfo_ = positioninfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ActorInfo.positionInfo)
}

// .Protocol.StatInfo statInfo = 4;
inline bool ActorInfo::_internal_has_statinfo() const {
  return this != internal_default_instance() && _impl_.statinfo_ != nullptr;
}
inline bool ActorInfo::has_statinfo() const {
  return _internal_has_statinfo();
}
inline void ActorInfo::clear_statinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.statinfo_ != nullptr) {
    delete _impl_.statinfo_;
  }
  _impl_.statinfo_ = nullptr;
}
inline const ::Protocol::StatInfo& ActorInfo::_internal_statinfo() const {
  const ::Protocol::StatInfo* p = _impl_.statinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::StatInfo&>(
      ::Protocol::_StatInfo_default_instance_);
}
inline const ::Protocol::StatInfo& ActorInfo::statinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.ActorInfo.statInfo)
  return _internal_statinfo();
}
inline void ActorInfo::unsafe_arena_set_allocated_statinfo(
    ::Protocol::StatInfo* statinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statinfo_);
  }
  _impl_.statinfo_ = statinfo;
  if (statinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ActorInfo.statInfo)
}
inline ::Protocol::StatInfo* ActorInfo::release_statinfo() {
  
  ::Protocol::StatInfo* temp = _impl_.statinfo_;
  _impl_.statinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::StatInfo* ActorInfo::unsafe_arena_release_statinfo() {
  // @@protoc_insertion_point(field_release:Protocol.ActorInfo.statInfo)
  
  ::Protocol::StatInfo* temp = _impl_.statinfo_;
  _impl_.statinfo_ = nullptr;
  return temp;
}
inline ::Protocol::StatInfo* ActorInfo::_internal_mutable_statinfo() {
  
  if (_impl_.statinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::StatInfo>(GetArenaForAllocation());
    _impl_.statinfo_ = p;
  }
  return _impl_.statinfo_;
}
inline ::Protocol::StatInfo* ActorInfo::mutable_statinfo() {
  ::Protocol::StatInfo* _msg = _internal_mutable_statinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.ActorInfo.statInfo)
  return _msg;
}
inline void ActorInfo::set_allocated_statinfo(::Protocol::StatInfo* statinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.statinfo_;
  }
  if (statinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(statinfo);
    if (message_arena != submessage_arena) {
      statinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.statinfo_ = statinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ActorInfo.statInfo)
}

// -------------------------------------------------------------------

// ItemInfo

// int32 itemDbId = 1;
inline void ItemInfo::clear_itemdbid() {
  _impl_.itemdbid_ = 0;
}
inline int32_t ItemInfo::_internal_itemdbid() const {
  return _impl_.itemdbid_;
}
inline int32_t ItemInfo::itemdbid() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.itemDbId)
  return _internal_itemdbid();
}
inline void ItemInfo::_internal_set_itemdbid(int32_t value) {
  
  _impl_.itemdbid_ = value;
}
inline void ItemInfo::set_itemdbid(int32_t value) {
  _internal_set_itemdbid(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.itemDbId)
}

// int32 dataSheetId = 2;
inline void ItemInfo::clear_datasheetid() {
  _impl_.datasheetid_ = 0;
}
inline int32_t ItemInfo::_internal_datasheetid() const {
  return _impl_.datasheetid_;
}
inline int32_t ItemInfo::datasheetid() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.dataSheetId)
  return _internal_datasheetid();
}
inline void ItemInfo::_internal_set_datasheetid(int32_t value) {
  
  _impl_.datasheetid_ = value;
}
inline void ItemInfo::set_datasheetid(int32_t value) {
  _internal_set_datasheetid(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.dataSheetId)
}

// int32 count = 3;
inline void ItemInfo::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t ItemInfo::_internal_count() const {
  return _impl_.count_;
}
inline int32_t ItemInfo::count() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.count)
  return _internal_count();
}
inline void ItemInfo::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void ItemInfo::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.count)
}

// int32 slot = 4;
inline void ItemInfo::clear_slot() {
  _impl_.slot_ = 0;
}
inline int32_t ItemInfo::_internal_slot() const {
  return _impl_.slot_;
}
inline int32_t ItemInfo::slot() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.slot)
  return _internal_slot();
}
inline void ItemInfo::_internal_set_slot(int32_t value) {
  
  _impl_.slot_ = value;
}
inline void ItemInfo::set_slot(int32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.slot)
}

// bool equipped = 5;
inline void ItemInfo::clear_equipped() {
  _impl_.equipped_ = false;
}
inline bool ItemInfo::_internal_equipped() const {
  return _impl_.equipped_;
}
inline bool ItemInfo::equipped() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.equipped)
  return _internal_equipped();
}
inline void ItemInfo::_internal_set_equipped(bool value) {
  
  _impl_.equipped_ = value;
}
inline void ItemInfo::set_equipped(bool value) {
  _internal_set_equipped(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.equipped)
}

// -------------------------------------------------------------------

// SkillInfo

// int32 skillId = 1;
inline void SkillInfo::clear_skillid() {
  _impl_.skillid_ = 0;
}
inline int32_t SkillInfo::_internal_skillid() const {
  return _impl_.skillid_;
}
inline int32_t SkillInfo::skillid() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.skillId)
  return _internal_skillid();
}
inline void SkillInfo::_internal_set_skillid(int32_t value) {
  
  _impl_.skillid_ = value;
}
inline void SkillInfo::set_skillid(int32_t value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.skillId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
